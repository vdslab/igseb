{
  "version": 3,
  "sources": ["../../d3-force-cluster/lib/forceCluster.js"],
  "sourcesContent": ["/**\n * Pulls nodes toward a set of cluster center nodes / points.\n * Adapted from Mike Bostock's Clustered Force Layout III:\n * https://bl.ocks.org/mbostock/7881887\n */\nfunction cluster (centers) {\n\n  let nodes,\n    centerpoints = [],\n    strength = 0.1,\n    centerInertia = 0.0;\n\n  // coerce centers accessor into a function\n  if (typeof centers !== 'function') centers = () => centers;\n\n  function force (alpha) {\n    // scale + curve alpha value\n    alpha *= strength * alpha;\n\n    let c, x, y, l, r;\n    nodes.forEach((d, i) => {\n      c = centerpoints[i];\n      if (!c || c === d) return;\n      \n      x = d.x - c.x,\n      y = d.y - c.y,\n      l = Math.sqrt(x * x + y * y),\n      r = d.radius + (c.radius || 0);\n\n      if (l && l != r) {\n        l = (l - r) / l * alpha;\n        d.x -= x *= l;\n        d.y -= y *= l;\n        c.x += (1 - centerInertia) * x;\n        c.y += (1 - centerInertia) * y;\n      }\n    });\n  }\n\n  function initialize () {\n    if (!nodes) return;\n\n    // populate local `centerpoints` using `centers` accessor\n    let i, n = nodes.length;\n    centerpoints = new Array(n);\n    for (i = 0; i < n; i++) centerpoints[i] = centers(nodes[i], i, nodes);\n  }\n  \n  /**\n   * Reinitialize the force with the specified nodes.\n   */\n  force.initialize = _ => {\n    nodes = _;\n    initialize();\n  };\n\n  /**\n   * An array of objects representing the centerpoint of each cluster,\n   * or a function that returns such an array.\n   * Each object must have `x` and `y` values, and optionally `radius`.\n   */\n  force.centers = _ => {\n    // return existing value if no value passed\n    if (_ == null) return centers;\n\n    // coerce centers accessor into a function\n    centers = typeof _ === 'function' ? _ : (n, i) => _[i];\n\n    // reinitialize\n    initialize();\n\n    // allow chaining\n    return force;\n  };\n\n  /**\n   * Strength of attraction to the cluster center node/position.\n   */\n  force.strength = _ => {\n    return _ == null ? strength : (strength = +_, force);\n  };\n\n  /**\n   * Inertia of cluster center nodes/positions.\n   * Higher values mean the cluster center moves less;\n   * lower values mean the cluster center is more easily\n   * pulled around by other nodes in the cluster.\n   * Typical values range from 0.0 (cluster centers move as much as all other nodes)\n   * to 1.0 (cluster centers are not moved at all by the clustering force).\n   */\n  force.centerInertia = _ => {\n    return _ == null ? centerInertia : (centerInertia = +_, force);\n  };\n\n  return force;\n\n}\n\nexport default cluster;"],
  "mappings": ";;;AAKA,iBAAkB,UAAS;MAErB,QAAA,QACF,eAAe,CAAA,GACf,WAAW,KACX,gBAAgB;MAGd,OAAO,aAAY;AAAY,eAAU,mBAAA;aAAM;;iBAEnC,OAAO;aAEZ,WAAW;QAEhB,IAAA,QAAG,IAAA,QAAG,IAAA,QAAG,IAAA,QAAG,IAAA;UACV,QAAQ,SAAC,GAAG,GAAM;UAClB,aAAa;UACb,CAAC,KAAK,MAAM;AAAG;UAEf,EAAE,IAAI,EAAE,GACZ,IAAI,EAAE,IAAI,EAAE,GACZ,IAAI,KAAK,KAAK,IAAI,IAAI,IAAI,CAAtB,GACJ,IAAI,EAAE,SAAU,GAAE,UAAU;UAExB,KAAK,KAAK,GAAG;YACV,KAAI,KAAK,IAAI;UAChB,KAAK,KAAK;UACV,KAAK,KAAK;UACV,KAAM,KAAI,iBAAiB;UAC3B,KAAM,KAAI,iBAAiB;;KAdjC;;wBAmBqB;QACjB,CAAC;AAAO;QAGR,IAAA,QAAG,IAAI,MAAM;mBACF,IAAI,MAAM,CAAV;SACV,IAAI,GAAG,IAAI,GAAG,KAAnB;mBAAqC,KAAK,SAAQ,MAAM,IAAI,GAAG,KAArB;;;QAMtC,aAAa,SAAA,GAAK;YACd;;;QASJ,UAAU,SAAA,GAAK;QAEf,KAAK;AAAM,aAAO;eAGZ,OAAO,MAAM,aAAa,IAAI,SAAC,GAAG,GAAJ;aAAU,EAAE;;;WAM7C;;QAMH,WAAW,SAAA,GAAK;WACb,KAAK,OAAO,WAAY,YAAW,CAAC,GAAG;;QAW1C,gBAAgB,SAAA,GAAK;WAClB,KAAK,OAAO,gBAAiB,iBAAgB,CAAC,GAAG;;SAGnD;;",
  "names": []
}
